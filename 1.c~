#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>

#define N 1000//サンプリング数

/* ローパスフィルタを行う関数"LPF" */
void LPF(double *Re, double *Im){
  int k;
  for(k=5;k<N;k++){
    Re[k]=0.0;
    Im[k]=0.0;
  }
}

int main(int argc, char *argv[]){
  double input[N];//入力信号
  double output1[N],output2[N];//出力信号
  double Re[N];//DFT後の実部成分
  double Im[N];//DFT後の虚部成分
  double Z1,Z2;//遅延器出力信号
  double Qout;//1bit量子化出力
  double tmp,tmp2;//格納用
  double PwSpec;//スペクトル出力用
  FILE *fp;
  int i,j;
  double W = 2.0*M_PI/N;
    
  //オーバーサンプリング
  for(i=0; i<N; i++){
    input[i] = sin(W*i);
  }

  //入力信号の時間波形出力
  fp = fopen("Input_time.txt", "wb");
  for(i=0; i<N; i++){
    fprintf(fp, "%d %f\n", i, input[i]);
  }

  //入力信号を実部と虚部に分けてDFT
  for(i=0; i<N; i++){
    for(j=0; j<N; j++){
      Re[i] += input[j]*cos(W*i*j);
      Im[i] += -input[j]*sin(W*i*j);
    }
  }
  //入力信号の振幅スペクトル出力
  fp = fopen("Input_spec.txt", "wb");
  for(i=0; i<N; i++){
    PwSpec = sqrt(Re[i]*Re[i]+Im[i]*Im[i]);
    fprintf(fp, "%d %f\n", i, PwSpec);
  }

  

/*** １次のΔΣ変調 ***/
  //出力の初期化
  for(i=0; i<N; i++){
    output1[i] = 0.0;
  }
  tmp = 0.0;
  
  for(i=0; i<N; i++){
    //１つ前の出力を足す
    if(i!=0){
      tmp = input[i] + Z1;
    }
    //1bit量子化
    if(tmp>=0.0){
      Qout = 1.0;
    }else if(tmp<0.0){
      Qout = -1.0;
    }
    //出力とフィードバック処理
    output1[i] = Qout;
    Z1 = tmp - output1[i];
  }

  //変調信号の時間波形出力
  fp = fopen("1stout_time.txt", "wb");
  for(i=0; i<N; i++){
    fprintf(fp, "%d %f\n", i, output1[i]);
  }
  
  //変調信号を実部と虚部に分けてDFT
  for(i=0; i<N; i++){
    for(j=0; j<N; j++){
      Re[i] += output1[j]*cos(W*i*j);
      Im[i] += -output1[j]*sin(W*i*j);
    }
  }
  //変調信号の振幅スペクトル出力
  fp = fopen("1stout_spec.txt", "wb");
  for(i=0; i<N; i++){
    PwSpec = sqrt(Re[i]*Re[i]+Im[i]*Im[i]);
    fprintf(fp, "%d %f\n", i, PwSpec);
  }

  //ローパスフィルタ
  LPF(Re, Im);

  //IDFT
  for(k=0;k<N;k++){
    for(n=0;n<N;n++){
      Re[k] += Re[n]*cos(2*M_PI*n*k/N) - Im[n]*sin(2*M_PI*n*k/N);
	  }
    Re[k]=Re[k]/N;
  }
  
/*** 2次のΔΣ変調 ***/
  //出力の初期化
  for(i=0; i<N; i++){
    output2[i] = 0.0;
  }
  tmp = 0.0;
  tmp2 = 0.0;
  
  for(i=0; i<N; i++){
    //2つ前の出力を足す
    if(i>=2){
      tmp = input[i] - Z2;
    }
    //1つ前の出力を足す
    if(i>=1){
      tmp2 = tmp + 2.0*Z1;
    }
    //1bit量子化
    if(tmp2>=0.0){
      Qout = 1.0;
    }else if(tmp2<0.0){
      Qout = -1.0;
    }
    //出力とフィードバック処理
    output2[i] = Qout;
    Z1 = tmp2 - output2[i];
    Z2 = Z1;
  }

  //変調信号の時間波形出力
  fp = fopen("2ndout_time.txt", "wb");
  for(i=0; i<N; i++){
    fprintf(fp, "%d %f\n", i, output2[i]);
  }
  
  //変調信号を実部と虚部に分けてDFT
  for(i=0; i<N; i++){
    for(j=0; j<N; j++){
      Re[i] += output2[j]*cos(W*i*j);
      Im[i] += -output2[j]*sin(W*i*j);
    }
  }
  //変調信号の振幅スペクトル出力
  fp = fopen("2ndout_spec.txt", "wb");
  for(i=0; i<N; i++){
    PwSpec = sqrt(Re[i]*Re[i]+Im[i]*Im[i]);
    fprintf(fp, "%d %f\n", i, PwSpec);
  }


fclose(fp);
}
